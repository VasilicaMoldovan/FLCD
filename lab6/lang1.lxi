%{#include <stdio.h>#include <string.h>#include <stdlib.h>#include <math.h>int no_lines = 0;%}%option noyywrapDIGIT     [0-9]WORD      ["]([a-zA-Z])*["]NUMBER    [1-9][0-9]*|0NR_REAL       {NUMBER}+"."{DIGIT}*CST           {WORD}|{NUMBER}|{NR_REAL}ID          [a-zA-Z][a-zA-Z0-9]{0,9}%%"individual"   {printf( "Reserved word: %s\n", yytext );}"decision"     {printf( "Reserved word: %s\n", yytext );}"char"         {printf( "Reserved word: %s\n", yytext );}"float"            {printf( "Reserved word: %s\n", yytext );}"const"        {printf( "Reserved word: %s\n", yytext );}"parsing"      {printf( "Reserved word: %s\n", yytext );}"situation"    {printf( "Reserved word: %s\n", yytext );}"other"        {printf( "Reserved word: %s\n", yytext );}"come"         {printf( "Reserved word: %s\n", yytext );}"leave"        {printf( "Reserved word: %s\n", yytext );}"return"       {printf( "Reserved word: %s\n", yytext );}"break"        {printf( "Reserved word: %s\n", yytext );}{ID}           {printf( "Identifier: %s\n", yytext );}{CST}          {printf( "Constant: %s\n", yytext );}":"            {printf( "Separator: %s\n", yytext );}";"                {printf( "Separator: %s\n", yytext );}","                {printf( "Separator: %s\n", yytext );}"."            {printf( "Separator: %s\n", yytext );}"+"                {printf( "Operator: %s\n", yytext );}"-"                {printf( "Operator: %s\n", yytext );}"*"                {printf( "Operator: %s\n", yytext );}"/"                {printf( "Operator: %s\n", yytext );}"("                {printf( "Separator: %s\n", yytext );}")"                {printf( "Separator: %s\n", yytext );}"["                {printf( "Separator: %s\n", yytext );}"]"                {printf( "Separator: %s\n", yytext );}"<"                {printf( "Operator: %s\n", yytext );}">"                {printf( "Operator: %s\n", yytext );}"<="           {printf( "Operator: %s\n", yytext );}">="           {printf( "Operator: %s\n", yytext );}"!="           {printf( "Operator: %s\n", yytext );}"="                {printf( "Operator: %s\n", yytext );}"=="           {printf( "Separator: %s\n", yytext );}"||"           {printf( "Separator: %s\n", yytext );}"&&"           {printf( "Separator: %s\n", yytext );}"{"                {printf( "Separator: %s\n", yytext );}"}"                {printf( "Separator: %s\n", yytext );}"-0"            {printf("Illegal symbol at line %d\n", no_lines); return -1;}"+0"            {printf("Illegal symbol at line %d\n", no_lines); return -1;}["leave" WORD]+         {printf("Printing string: %s\n", yytext);}[ \t]+                {}[\n]+  {++no_lines;}[0-9][a-zA-Z0-9]{0,7}  {printf("Illegal identifier at line %d\n", no_lines); return -1;}.                      {printf("Illegal symbol at line %d\n", no_lines); return -1;}%%int main(){yylex();printf("Done");}