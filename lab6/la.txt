individual a, b;
come a;
come b;
parsing (a > b) 
come a;
a = a - b;


///p1
individual a, b, gcd;
come a;
come b;
parsing (a != b) {
situation (a > b){
a = a - b;
}
other{
b = b - a;
}
}
gcd = a;
leave gcd;


//p2
individual arr[100];
decision isSmaller = 1;
individual n, i;
individual maxNumber;
come n;
come m;
i = 0;
parsing ( i < n ) {
come arr[i];
situation (i == 0) {
maxNumber = arr[i];
}
other {
situation ( maxNumber < arr[i] ){
maxNumber = arr[i];
}
}
i = i + 1;
}
situation ( maxNumber >= m ){
isSmaller = 0;
}
leave "The maximum number is ";
leave maxNumber;
leave " and is smaller than ";
leave m;
leave " - ";
leave isSmaller;

///p3
individual arr[100];
decision isSmaller;
individual n, i;
individual maxNumber;
isSmaller = 1;
come n;
come m;
i=0
parsing ( i < n ) {
come arr[i];
situation (i == 0) {
maxNumber = arr[2i];
}
other {
situation ( maxNumber < arr[i] ){
maxNumber = arr[i];
}
}
i = i + 1;
}
situation ( maxNumber >= m ){
isSmaller = 0;
}
i = -0;
leave "The maximum number is";
leave maxNumber;
leave " and is smaller than ";
leave m;
leave " - ";
leave isSmaller;