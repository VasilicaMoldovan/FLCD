%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include "parser.tab.h"
int no_lines = 0;
%}

%option noyywrap
%option yylineno

DIGIT     [0-9]
WORD      (\w+)
NUMBER    [1-9][0-9]*|0
NR_REAL       {NUMBER}+"."{DIGIT}*
CST           {WORD}|{NUMBER}|{NR_REAL}
ID          [a-zA-Z][a-zA-Z0-9]{0,9}

%%

"individual"   {printf( "Reserved word: %s\n", yytext ); return INDIVIDUAL;}
"decision"     {printf( "Reserved word: %s\n", yytext ); return DECISION;}
"char"         {printf( "Reserved word: %s\n", yytext ); return CHAR;}
"float"        {printf( "Reserved word: %s\n", yytext ); return FLOAT;}
"const"        {printf( "Reserved word: %s\n", yytext ); return CONST;}
"parsing"      {printf( "Reserved word: %s\n", yytext ); return PARSING;}
"situation"    {printf( "Reserved word: %s\n", yytext ); return SITUATION;}
"other"        {printf( "Reserved word: %s\n", yytext ); return OTHER;}
"come"         {printf( "Reserved word: %s\n", yytext ); return COME;}
"leave"        {printf( "Reserved word: %s\n", yytext ); return LEAVE;}
"return"       {printf( "Reserved word: %s\n", yytext ); return RETURN;}
"break"        {printf( "Reserved word: %s\n", yytext ); return BREAK;}


{ID}           {printf( "Identifier: %s\n", yytext ); return IDENTIFIER;}

{CST}          {printf( "Constant: %s\n", yytext ); return CONSTANT;}

":"	    {printf( "Separator: %s\n", yytext ); return COLON;}
";"	    {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","	    {printf( "Separator: %s\n", yytext ); return COMA;}
"."	    {printf( "Separator: %s\n", yytext ); return DOT;}
"+"	    {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	    {printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	    {printf( "Operator: %s\n", yytext ); return MULTIPLY;}
"/"	    {printf( "Operator: %s\n", yytext ); return DIVISION;}
"("	    {printf( "Separator: %s\n", yytext ); return LEFT_ROUND_PARENTHESIS;}
")"	    {printf( "Separator: %s\n", yytext ); return RIGHT_ROUND_PARENTHESIS;}
"["	    {printf( "Separator: %s\n", yytext ); return LEFT_SQUARE_PARENTHESIS;}
"]"	    {printf( "Separator: %s\n", yytext ); return RIGHT_SQUARE_PARENTHESIS;}
"<"	    {printf( "Operator: %s\n", yytext ); return LESS_THAN;}
">"	    {printf( "Operator: %s\n", yytext ); return GREATER_THAN;}
"<="	{printf( "Operator: %s\n", yytext ); return LESS_OR_EQUAL_THAN;}
">="	{printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL_THAN;}
"<>"	{printf( "Operator: %s\n", yytext ); return DIFFERENT;}
"="	    {printf( "Operator: %s\n", yytext ); return ASSIGNMENT;}
"=="    {printf( "Operator: %s\n", yytext ); return EQUAL;}
"!="    {printf( "Operator: %s\n", yytext ); return DIFFERENT;}
"||"    {printf( "Operator: %s\n", yytext ); return OR;}
"&&"    {printf( "Operator: %s\n", yytext ); return AND;}
"{"     {printf( "Separator: %s\n", yytext ); LEFT_CURLY_BRACKET;}
"}"     {printf( "Separator: %s\n", yytext ); RIGHT_CURLY_BRACKET;}
"-0"    {printf("Illegal symbol at line %d\n", no_lines); return -1;}
"+0"    {printf("Illegal symbol at line %d\n", no_lines); return -1;}

[ \t]+                {}

[\n]+  {++no_lines;}

[0-9][a-zA-Z0-9]{0,7}  {printf("Illegal identifier at line %d\n", no_lines); return -1;}
\"[a-z A-Z-]+\"          {printf("Word %s\n", yytext); return WORD;}

.                      {printf("Illegal symbol at line %d\n", no_lines); return -1;}
%%
